char *readline (const char *prompt);
The function readline() prints a prompt prompt and then reads and returns a single line of text from the user.
If prompt is NULL or the empty string, no prompt is displayed. The line readline returns is allocated with malloc(); 
the caller should free() the line when it has finished with it. 

void rl_clear_history (void);
Clear the history list by deleting all of the entries, in the same manner as the History library’s clear_history() function.
This differs from clear_history because it frees private data Readline saves in the history list.

int rl_on_new_line (void);
Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline.

void rl_replace_line (const char *text, int clear_undo);
Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible.
If clear_undo is non-zero, the undo list associated with the current line is cleared.

void rl_redisplay (void);
Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.

void add_history (char *string);
Place string at the end of the history list. The associated data field (if any) is set to NULL.

printf, malloc, free, write, access, open, read, close, fork, wait, waitpid, kill, exit, execve, dup, dup2, pipe

wait3, wait4; pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
Similar to waitpid, but additionally return resource usage information about the child in the structure pointed to by rusage

char *getcwd(char *buf, size_t size);
The getcwd() function returns a pointer which points to a character array where the path of current working directory is stored.
In case the path is not found then it returns a null pointer and the contents of the array are undefined and the errno is set to indicate the type of error.

int chdir( const char *pathname);
Used to change the current working directory of the program/process by passing the path to the function as shown in the syntax.

int stat(const char *path, struct stat *buf);    
Gets status information about a specified file and places it in the area of memory pointed to by the buf argument.
If the named file is a symbolic link, stat() resolves the symbolic link. It also returns information about the resulting file.

int lstat(const char *restrict path, struct stat *restrict buf);
The lstat() function shall be equivalent to stat(), except when path refers to a symbolic link.
In that case lstat() shall return information about the link, while stat() shall return information about the file the link references.

int fstat(int fd, struct stat *buf);
fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.

int unlink(const char *path);
The unlink() function shall remove a link to a file.
If path names a symbolic link, unlink() shall remove the symbolic link named by path and shall not affect any file or directory named by the contents of the symbolic link.
Otherwise, unlink() shall remove the link named by the pathname pointed to by path and shall decrement the link count of the file referenced by the link.

NOTE: The type DIR, which is defined in the header <dirent.h>, represents a directory stream, 
which is an ordered sequence of all the directory entries in a particular directory.

DIR *opendir(const char *dirname);
The opendir() function shall open a directory stream corresponding to the directory named by the dirname argument.

struct dirent *readdir(DIR *dirp);
The readdir() function returns a pointer to a structure representing the directory entry at the current position in
the directory stream specified by the argument dirp, and positions the directory stream at the next entry.
It returns a null pointer upon reaching the end of the directory stream.

int closedir(DIR *dirp);
The closedir() function shall close the directory stream referred to by the argument dirp.
Upon return, the value of dirp may no longer point to an accessible object of the type DIR.
If a file descriptor is used to implement type DIR, that file descriptor shall be closed.

char *strerror(int errnum);
The strerror() function returns a pointer to a string that describes the error code passed in the argument errnum

void perror(const char *s);
The perror() function produces a message on standard error describing the last error encountered during a call to a system
or library function.

int isatty(int fd);
The isatty() function tests whether fd is an open file descriptor referring to a terminal.

char *ttyname(int fd);
The function ttyname() returns a pointer to the null-terminated pathname of the terminal device that is open on the file
descriptor fd, or NULL on error (for example, if fd is not connected to a terminal).
The return value may point to static data, possibly overwritten by the next call.

int ttyslot(void);
the function ttyslot() returns the index of the controlling terminal of the calling process in the file /etc/ttys, and that
is (usually) the same as the index of the entry for the current user in the file /etc/utmp.

int ioctl(int fd, unsigned long request, ...);
